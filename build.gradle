plugins {
    id 'java'
    id 'java-library'
    id 'io.freefair.lombok' version '8.10'
    id 'org.springframework.boot' version '3.4.1'
    id 'maven-publish'
    id 'com.google.cloud.tools.jib' version '3.2.0'
    id 'application'
}

group = project.projectGroup
version = project.projectVersion
sourceCompatibility = "17"
targetCompatibility = "17"
compileJava.options.encoding = "UTF-8"
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
}
java {
    withSourcesJar()
}

configurations.configureEach {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    if(project.mavenUrl) {
        maven {
            allowInsecureProtocol = true
            url project.mavenUrl
            credentials {
                username project.mavenUsername
                password project.mavenPassword
            }
        }
    }
    mavenCentral()
}

dependencies {

    // platform
    implementation platform("org.chomookun.arch4j:arch4j-dependencies:1.0.0-SNAPSHOT")
    annotationProcessor platform("org.chomookun.arch4j:arch4j-dependencies:1.0.0-SNAPSHOT")

    // arch4j-web
    implementation "org.chomookun.arch4j:arch4j-web:1.0.0-SNAPSHOT"

    // spring boot configuration processor
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // query dsl
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor 'com.querydsl:querydsl-apt::jakarta'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'

    // https://mvnrepository.com/artifact/com.mitchtalmadge/ascii-data
    implementation 'com.mitchtalmadge:ascii-data:1.4.0'

    // groovy
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    // graalpy
    implementation "org.graalvm.polyglot:polyglot:24.1.0"
    implementation "org.graalvm.polyglot:python:24.1.0"

}

test {
    useJUnitPlatform()
    testLogging {
        events 'failed'
        exceptionFormat 'full'
    }
}

jar {
    enabled = true
    archiveClassifier = ''
}

bootJar {
    enabled = true
    archiveClassifier = 'boot'
    mainClass = 'org.oopscraft.fintics.FinticsApplication'
}

springBoot {
    buildInfo()
}

publishing {
    repositories {
        maven {
            allowInsecureProtocol = true
            url project.publishingMavenUrl
            credentials {
                username project.publishingMavenUsername
                password project.publishingMavenPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

jib {
    System.setProperty("sendCredentialsOverHttp", "true");
    allowInsecureRegistries = true
    from {
        image = project.jibFromImage
        auth {
            username = project.jibFromAuthUsername
            password = project.jibFromAuthPassword
        }
    }
    to {
        image = "${project.jibToImageNamespace}/${project.name}"
        auth {
            username = project.jibToAuthUsername
            password = project.jibToAuthPassword
        }
        tags = [project.jibToTags]
    }
    containerizingMode = "packaged"
    container {
        format = 'OCI'
        creationTime = "USE_CURRENT_TIMESTAMP"
        ports = ['8080']
        jvmFlags = ["-Dfile.encoding=UTF-8"]
    }
    extraDirectories {
        paths {
            path {
                from = file('src/dist/config')
                into = '/config'
            }
        }
    }
}

distTar {
    enabled = false
}

distZip {
    enabled = false
}

bootDistZip {
    into("${project.name}-boot-${project.version}") {
        from 'src/dist'
    }
}

bootDistTar {
    into("${project.name}-boot-${project.version}") {
        from 'src/dist'
    }
}

